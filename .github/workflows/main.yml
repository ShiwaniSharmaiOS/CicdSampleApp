name: iOS Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.2.0' # Specify the Xcode version

      - name: Install dependencies
        run: |
          sudo xcode-select -s /Applications/Xcode_15.2.0.app/Contents/Developer
          sudo xcodebuild -license accept

      - name: Build
        run: |
          xcodebuild -project CicdSampleApp.xcodeproj \
                      -scheme CicdSampleApp \
                      -sdk iphonesimulator \
                      -destination 'platform=iOS Simulator,name=iPhone 15' \
                      clean build

      - name: Run Tests
        run: |
          xcodebuild -project CicdSampleApp.xcodeproj \
                      -scheme CicdSampleApp \
                      -sdk iphonesimulator \
                      -destination 'platform=iOS Simulator,name=iPhone 15' \
                      test

       - name: Analyze Errors
         run: |
    echo "Analyzing build and test logs for errors..."
    
    # Example: Check for nil or optional unwrapping errors in build output
    if grep -q "fatal error: unexpectedly found nil" build.log; then
      echo "Error: Nil or optional unwrapping issue detected in build."
      exit 1  # Exit with failure status to mark the workflow as failed
    fi
    
    # Example: Check for specific test failures related to nil or optional unwrapping
    if grep -q "Assertion failed: expected non-nil value" test.log; then
      echo "Error: Test failure due to nil or optional unwrapping issue."
      exit 1  # Exit with failure status to mark the workflow as failed
    fi
    
    # Add more checks as needed based on your specific error scenarios
